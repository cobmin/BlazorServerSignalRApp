@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Loopring
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Address Lookup</PageTitle>

<div class="form-group">
    <label>
        Hex/Ens: 
        <input @bind="userInput" @onkeyup="@Enter" required size="44" />
    </label>
    <button @onclick="GetEnsorHex" disabled="@(!IsConnected)">Find</button>
</div>

<hr>

<p>@userResult</p>



@code {
    private HubConnection? hubConnection;
    private string? addressInput;
    private string? ensResult;
    private string? addressResult;
    private string? ensInput;
    private string? userInput;
    private string? userResult;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/loopringService"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (data) =>
        {
            if (data == "")
            {
                userResult = "This ens does not exist.";
            }
            else
            {
                userResult = data;
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (hubConnection is not null)
                {
                    await hubConnection.SendAsync("GetEnsorHex", userInput);
                }
        }
    }
    private async Task GetEnsorHex()
    {
        if (hubConnection is not null)
            {
                await hubConnection.SendAsync("GetEnsorHex", userInput);
            }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}